ipak <- function(pkg)
{
# This function is for attaching libraries in a vector into the session
# If they are not installed yet, then proceed and install them
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table")
ipak(libraryList)
# Create a vector of variables we are interested in
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
#  function ods takes in a dataset with all variables
# return a dataset with only a set of selected variables
makeODS <- function(data)
{
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
ods <- data[,vars]
return(ods)
}
#ods = makeODS(data)
prepareODS <- function(path)
{
data = read_csv(path)
ods = makeODS(data)
return(ods)
}
adjustEpisode <- function(syn)
{
numRow <- nrow(syn)
for (i in 1:numRow)
{
if (syn$`Number of Episodes Previous Day`[i] == 0)
{
syn$`Episode`[i-1] = 0
}
else
{
syn$`Episode`[i-1] = 1
}
}
return(syn)
}
path = "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data/Individual_Patient/patientID_17.csv"
ods = prepareODS(path)
ods = as.data.frame(ods)
#sds = syn(ods, visit.sequence = , m = , proper = TRUE, seed = , predictor.matrix = )
sds = syn(ods)
ods <- adjustEpisode(ods)
sds$syn <- adjustEpisode(sds$syn)
sds$syn
adjustToFactor <- function(data, var1 = "Episode", var2 = "Number of Episodes Previous Day")
{
# Episode and Numbe of Episode the previous day need to be as factor
data[, var1] <- as.factor(data[, var1])
data[, var2] <- as.factor(data[, var2])
return(data)
}
ods = adjustToFactor(ods)
sds$syn = adjustToFactor(sds$syn)
# # Episode and Numbe of Episode the previous day need to be as factor
# # for ods
# ods[,"Episode"] <- as.factor(ods[,"Episode"])
# ods[,"Number of Episodes Previous Day"] <- as.factor(ods[,"Number of Episodes Previous Day"])
# # for sds
# sds$syn[,"Episode"] <- as.factor(sds$syn[,"Episode"])
# sds$syn[,"Number of Episodes Previous Day"] <- as.factor(sds$syn[,"Number of Episodes Previous Day"])
sds$syn
cmp <- function(ods, sds, vars)
{
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
print(cmp[1])
print(cmp[2])
}
}
# Plot the points of each record in the observed data set vs the synthetic data set.
# Fit a linear model into the data
# Am Stress and AM Hunger
plot1 <- ggplot(data = ods, aes(x = `AM Stress`, y = `AM Hunger`, col = `Episode`)) +
geom_point() +
geom_smooth(method = glm) +
ggtitle(label = "Observed Data")
plot1.synth =  ggplot(data = sds$syn, aes(x = `AM Stress`, y = `AM Hunger`, col = `Episode`)  ) +
geom_point() +
geom_smooth(method = glm) +
ggtitle("Synthetic Data")
grid.arrange(plot1, plot1.synth, nrow = 2)
# AM Sleep and AM Sleep Hours
plot2 <- ggplot(data = ods, aes(x = `AM Sleep`, y = `AM Sleep hours`, col = `Episode`)) +
geom_point() +
geom_smooth(method = glm) +
ggtitle(label = "Observed Data")
plot2.synth =  ggplot(data = sds$syn, aes(x = `AM Sleep`, y = `AM Sleep hours`, col = `Episode`)  ) +
geom_point() +
geom_smooth(method = glm) +
ggtitle("Synthetic Data")
grid.arrange(plot2, plot2.synth, nrow = 2)
#PM Stress and EVE Stress
plot3 <- ggplot(data = ods, aes(x = `PM Stress`, y = `EVE Stress`, col = `Episode`)) +
geom_point() +
geom_smooth(method = glm) +
ggtitle(label = "Observed Data")
plot3.synth =  ggplot(data = sds$syn, aes(x = `PM Stress`, y = `EVE Stress`, col = `Episode`)  ) +
geom_point() +
geom_smooth(method = glm) +
ggtitle("Synthetic Data")
grid.arrange(plot3, plot3.synth, nrow = 2)
call <- sds$call
m <- sds$m
method <- sds$method
predictor.matrix <- sds$predictor.matrix
cmp(ods, sds, vars)
#sds = syn(ods, visit.sequence = , m = , proper = TRUE, seed = , predictor.matrix = )
my.seed = 7531
sds = syn(ods, m = 4,proper = TRUE, seed = my.seed)
sds$syn
# Print the comparison
cmp(ods, sds, vars)
names(sds$syn)
fsds <- glm.synds(formula = `Episode` ~ `AM_Stress` + `AM_Hunger` + `AM_Sleep` + `AM Sleep hours` +
`AM Weight` + `Percent Weight change (from prev week)` + `Percent Weight change (from prev day)` + `PM Stress` + `EVE Stress` + `Number of Episodes Previous Day`, data = sds, family = "binomial")
sds$syn
fsds <- glm.synds(formula = Episode ~ `AM_Stress` + `AM_Hunger` + `AM_Sleep` + `AM Sleep hours` +
`AM Weight` + `Percent Weight change (from prev week)` + `Percent Weight change (from prev day)` + `PM Stress` + `EVE Stress` + `Number of Episodes Previous Day`, data = sds, family = "binomial")
sds$syn
sds$syn[1]
class(sds$syn)
fsds <- glm.synds(formula = Episode ~ `AM_Stress` + `AM_Hunger` + `AM_Sleep` + `AM Sleep hours` +
`AM Weight` + `Percent Weight change (from prev week)` + `Percent Weight change (from prev day)` + `PM Stress` + `EVE Stress` + `Number of Episodes Previous Day`, data = sds[1:4], family = "binomial")
fsds <- glm.synds(formula = Episode ~ `AM_Stress` + `AM_Hunger` + `AM_Sleep` + `AM Sleep hours` +
`AM Weight` + `Percent Weight change (from prev week)` + `Percent Weight change (from prev day)` + `PM Stress` + `EVE Stress` + `Number of Episodes Previous Day`, data = sds$syn[1:4], family = "binomial")
fsds <- glm.synds(formula = Episode ~ `AM_Stress` + `AM_Hunger` + `AM_Sleep` + `AM Sleep hours` +
`AM Weight` + `Percent Weight change (from prev week)` + `Percent Weight change (from prev day)` + `PM Stress` + `EVE Stress` + `Number of Episodes Previous Day`, data = sds, family = "binomial")
fsds <- glm.synds(formula = Episode ~ `AM Stress` + `AM Hunger` + `AM Sleep` + `AM Sleep hours` +
`AM Weight` + `Percent Weight change (from prev week)` + `Percent Weight change (from prev day)` + `PM Stress` + `EVE Stress` + `Number of Episodes Previous Day`, data = sds, family = "binomial")
summary(fsds)
compare(fsds, ods)
# install and load package with ipak function bt Steven Worthington
# https://gist.github.com/stevenworthington/3178163
ipak <- function(pkg)
{
# This function is for attaching libraries in a vector into the session
# If they are not installed yet, then proceed and install them
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table")
ipak(libraryList)
# Create a vector of variables we are interested in
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
#  function ods takes in a dataset with all variables
# return a dataset with only a set of selected variables
makeODS <- function(data)
{
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
ods <- data[,vars]
return(ods)
}
#ods = makeODS(data)
prepareODS <- function(path)
{
data = read_csv(path)
ods = makeODS(data)
return(ods)
}
adjustEpisode <- function(syn)
{
numRow <- nrow(syn)
for (i in 1:numRow)
{
if (syn$`Number of Episodes Previous Day`[i] == 0)
{
syn$`Episode`[i-1] = 0
}
else
{
syn$`Episode`[i-1] = 1
}
}
return(syn)
}
path = "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data/Individual_Patient/patientID_17.csv"
ods = prepareODS(path)
ods = as.data.frame(ods)
#sds = syn(ods, visit.sequence = , m = , proper = TRUE, seed = , predictor.matrix = )
sds = syn(ods)
ods <- adjustEpisode(ods)
sds$syn <- adjustEpisode(sds$syn)
sds$syn
adjustToFactor <- function(data, var1 = "Episode", var2 = "Number of Episodes Previous Day")
{
# Episode and Numbe of Episode the previous day need to be as factor
data[, var1] <- as.factor(data[, var1])
data[, var2] <- as.factor(data[, var2])
return(data)
}
ods = adjustToFactor(ods)
sds$syn = adjustToFactor(sds$syn)
# # Episode and Numbe of Episode the previous day need to be as factor
# # for ods
# ods[,"Episode"] <- as.factor(ods[,"Episode"])
# ods[,"Number of Episodes Previous Day"] <- as.factor(ods[,"Number of Episodes Previous Day"])
# # for sds
# sds$syn[,"Episode"] <- as.factor(sds$syn[,"Episode"])
# sds$syn[,"Number of Episodes Previous Day"] <- as.factor(sds$syn[,"Number of Episodes Previous Day"])
sds$syn
cmp <- function(ods, sds, vars)
{
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
print(cmp[1])
print(cmp[2])
}
}
# Plot the points of each record in the observed data set vs the synthetic data set.
# Fit a linear model into the data
# Am Stress and AM Hunger
plot1 <- ggplot(data = ods, aes(x = `AM Stress`, y = `AM Hunger`, col = `Episode`)) +
geom_point() +
geom_smooth(method = glm) +
ggtitle(label = "Observed Data")
plot1.synth =  ggplot(data = sds$syn, aes(x = `AM Stress`, y = `AM Hunger`, col = `Episode`)  ) +
geom_point() +
geom_smooth(method = glm) +
ggtitle("Synthetic Data")
grid.arrange(plot1, plot1.synth, nrow = 2)
# AM Sleep and AM Sleep Hours
plot2 <- ggplot(data = ods, aes(x = `AM Sleep`, y = `AM Sleep hours`, col = `Episode`)) +
geom_point() +
geom_smooth(method = glm) +
ggtitle(label = "Observed Data")
plot2.synth =  ggplot(data = sds$syn, aes(x = `AM Sleep`, y = `AM Sleep hours`, col = `Episode`)  ) +
geom_point() +
geom_smooth(method = glm) +
ggtitle("Synthetic Data")
grid.arrange(plot2, plot2.synth, nrow = 2)
#PM Stress and EVE Stress
plot3 <- ggplot(data = ods, aes(x = `PM Stress`, y = `EVE Stress`, col = `Episode`)) +
geom_point() +
geom_smooth(method = glm) +
ggtitle(label = "Observed Data")
plot3.synth =  ggplot(data = sds$syn, aes(x = `PM Stress`, y = `EVE Stress`, col = `Episode`)  ) +
geom_point() +
geom_smooth(method = glm) +
ggtitle("Synthetic Data")
grid.arrange(plot3, plot3.synth, nrow = 2)
call <- sds$call
# install and load package with ipak function bt Steven Worthington
# https://gist.github.com/stevenworthington/3178163
ipak <- function(pkg)
{
# This function is for attaching libraries in a vector into the session
# If they are not installed yet, then proceed and install them
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table")
ipak(libraryList)
# Create a vector of variables we are interested in
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
#  function ods takes in a dataset with all variables
# return a dataset with only a set of selected variables
makeODS <- function(data)
{
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
ods <- data[,vars]
return(ods)
}
#ods = makeODS(data)
prepareODS <- function(path)
{
data = read_csv(path)
ods = makeODS(data)
return(ods)
}
adjustEpisode <- function(syn)
{
numRow <- nrow(syn)
for (i in 1:numRow)
{
if (syn$`Number of Episodes Previous Day`[i] == 0)
{
syn$`Episode`[i-1] = 0
}
else
{
syn$`Episode`[i-1] = 1
}
}
return(syn)
}
path = "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data/Individual_Patient/patientID_17.csv"
ods = prepareODS(path)
ods = as.data.frame(ods)
#sds = syn(ods, visit.sequence = , m = , proper = TRUE, seed = , predictor.matrix = )
sds = syn(ods)
ods <- adjustEpisode(ods)
sds$syn <- adjustEpisode(sds$syn)
sds$syn
adjustToFactor <- function(data, var1 = "Episode", var2 = "Number of Episodes Previous Day")
{
# Episode and Numbe of Episode the previous day need to be as factor
data[, var1] <- as.factor(data[, var1])
data[, var2] <- as.factor(data[, var2])
return(data)
}
ods = adjustToFactor(ods)
sds$syn = adjustToFactor(sds$syn)
# # Episode and Numbe of Episode the previous day need to be as factor
# # for ods
# ods[,"Episode"] <- as.factor(ods[,"Episode"])
# ods[,"Number of Episodes Previous Day"] <- as.factor(ods[,"Number of Episodes Previous Day"])
# # for sds
# sds$syn[,"Episode"] <- as.factor(sds$syn[,"Episode"])
# sds$syn[,"Number of Episodes Previous Day"] <- as.factor(sds$syn[,"Number of Episodes Previous Day"])
sds$syn
cmp <- function(ods, sds, vars)
{
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
print(cmp[1])
print(cmp[2])
}
}
# Plot the points of each record in the observed data set vs the synthetic data set.
# Fit a linear model into the data
# Am Stress and AM Hunger
plot1 <- ggplot(data = ods, aes(x = `AM Stress`, y = `AM Hunger`, col = `Episode`)) +
geom_point() +
geom_smooth(method = glm) +
ggtitle(label = "Observed Data")
plot1.synth =  ggplot(data = sds$syn, aes(x = `AM Stress`, y = `AM Hunger`, col = `Episode`)  ) +
geom_point() +
geom_smooth(method = glm) +
ggtitle("Synthetic Data")
grid.arrange(plot1, plot1.synth, nrow = 2)
# AM Sleep and AM Sleep Hours
plot2 <- ggplot(data = ods, aes(x = `AM Sleep`, y = `AM Sleep hours`, col = `Episode`)) +
geom_point() +
geom_smooth(method = glm) +
ggtitle(label = "Observed Data")
plot2.synth =  ggplot(data = sds$syn, aes(x = `AM Sleep`, y = `AM Sleep hours`, col = `Episode`)  ) +
geom_point() +
geom_smooth(method = glm) +
ggtitle("Synthetic Data")
grid.arrange(plot2, plot2.synth, nrow = 2)
#PM Stress and EVE Stress
plot3 <- ggplot(data = ods, aes(x = `PM Stress`, y = `EVE Stress`, col = `Episode`)) +
geom_point() +
geom_smooth(method = glm) +
ggtitle(label = "Observed Data")
plot3.synth =  ggplot(data = sds$syn, aes(x = `PM Stress`, y = `EVE Stress`, col = `Episode`)  ) +
geom_point() +
geom_smooth(method = glm) +
ggtitle("Synthetic Data")
grid.arrange(plot3, plot3.synth, nrow = 2)
call <- sds$call
m <- sds$m
method <- sds$method
predictor.matrix <- sds$predictor.matrix
cmp(ods, sds, vars)
#sds = syn(ods, visit.sequence = , m = , proper = TRUE, seed = , predictor.matrix = )
my.seed = 7531
sds = syn(ods, m = 4,proper = TRUE, seed = my.seed)
sds$syn
# Print the frequentcy histogram, compare those of ods and sds side by side
cmp(ods, sds, vars)
fsds <- glm.synds(formula = Episode ~ `AM Stress` + `AM Hunger` + `AM Sleep` + `AM Sleep hours` +
`AM Weight` + `Percent Weight change (from prev week)` + `Percent Weight change (from prev day)` + `PM Stress` + `EVE Stress` + `Number of Episodes Previous Day`, data = sds, family = "binomial")
summary(fsds)
compare(fsds, ods)
sds$syn["Number of Episodes Previous Day"] <- as.numeric(sds$syn["Number of Episodes Previous Day"] )
sds$syn["Number of Episodes Previous Day"]
sds$syn[1:4]
print(sds$syn[i]$`Number of Episodes Previous Day`)
for (i in 1:4)
{
print(sds$syn[i]$`Number of Episodes Previous Day`)
}
sds$syn[i]
sds$syn[1]
sds$syn[1][,"umber of Episodes Previous Day"]
(sds$syn[1])[,"umber of Episodes Previous Day"]
sds$syn[1][,"Number of Episodes Previous Day"]
sds$syn[1]["Number of Episodes Previous Day"]
sds$syn[1]
class(sds$syn[1])
fsds <- glm.synds(formula = Episode ~ `AM Stress` + `AM Hunger` + `AM Sleep` + `AM Sleep hours` +
`AM Weight` + `Percent Weight change (from prev week)` + `Percent Weight change (from prev day)` + `PM Stress` + `EVE Stress` + `Number of Episodes Previous Day`, data = sds, family = "binomial")
summary(fsds)
compare(fsds, ods)
unlist(x = sds)
unlist(x = sds)[1]
fsds <- glm.synds(formula = Episode ~ `AM Stress` + `AM Hunger` + `AM Sleep` + `AM Sleep hours` +
`AM Weight` + `Percent Weight change (from prev week)` + `Percent Weight change (from prev day)` + `PM Stress` + `EVE Stress` + `Number of Episodes Previous Day`, data = sds, family = "binomial")
summary(fsds)
compare(fsds, ods)
source(file = "ipak.R")
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table", "dplyr")
ipak(libraryList)
source(file = "rmd2rscript.R")
#rmd2rscript(infile = "Synthetic_Data_Generation.Rmd")
source(file = "Synthetic_Data_Generation.R")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours", "AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)","PM Stress", "EVE Stress", "Number of Episodes Previous Day", "Episode" )
data.Path <- "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data"
file.Names <- list.files(path = data.path, pattern = "*.csv")
data.Path <- "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data"
file.Names <- list.files(path = data.path, pattern = "*.csv")
file.Names <- list.files(path = data.Path, pattern = "*.csv")
len <- length(files.Names)
file.Names <- list.files(path = data.Path, pattern = "*.csv")
len <- length(file.Names)
main.Path <- "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data"
file.Names <- list.files(path = main.Path, pattern = "*.csv")
len <- length(file.Names)
main.Path <- "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data"
file.Names <- list.files(path = main.Path, pattern = "*.csv")
len <- length(file.Names)
for (i in 1:len)
{
full.Path <- paste(main.Path, file.Names[i], sep = "/")
assign(x = file.Names[i], value = read.csv(full.Path))
}
View(questions_adjusted.csv)
# source all the neccesaary files and script
source(file = "ipak.R")
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table", "dplyr", "caret",
"rpart")
ipak(libraryList)
source(file = "rmd2rscript.R")
#rmd2rscript(infile = "Synthetic_Data_Generation.Rmd")
source(file = "Synthetic_Data_Generation.R")
# source all the neccesaary files and script
source(file = "ipak.R")
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table", "dplyr", "caret",
"rpart", "rattle")
ipak(libraryList)
# source all the neccesaary files and script
source(file = "ipak.R")
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table", "dplyr", "caret",
"rpart", "rpart.plot")
ipak(libraryList)
source(file = "rmd2rscript.R")
#rmd2rscript(infile = "Synthetic_Data_Generation.Rmd")
source(file = "Synthetic_Data_Generation.R")
# source all the neccesaary files and script
source(file = "ipak.R")
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table", "dplyr", "caret",
"rpart", "rpart.plot", "RColorBrewer")
ipak(libraryList)
source(file = "rmd2rscript.R")
#rmd2rscript(infile = "Synthetic_Data_Generation.Rmd")
source(file = "Synthetic_Data_Generation.R")
install.packages("rattle")
install.packages("rattle")
# source all the neccesaary files and script
source(file = "ipak.R")
# rattle package requires separate installation. After running install.packages(), select "y" as being prompted
#install.packages("rattle")
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table", "dplyr", "caret",
"rpart", "rattle","rpart.plot", "RColorBrewer")
# rattle package requires separate installation. After running install.packages(), select "y" as being prompted
install.packages("rattle")
ipak(libraryList)
source(file = "rmd2rscript.R")
#rmd2rscript(infile = "Synthetic_Data_Generation.Rmd")
source(file = "Synthetic_Data_Generation.R")
# source all the neccesaary files and script
source(file = "ipak.R")
# rattle package requires separate installation. After running install.packages(), select "y" as being prompted
#install.packages("rattle")
# Create a vector of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table", "dplyr", "caret",
"rpart", "rattle","rpart.plot", "RColorBrewer")
# rattle package requires separate installation. After running install.packages(), select "y" as being prompted
install.packages("rattle")
