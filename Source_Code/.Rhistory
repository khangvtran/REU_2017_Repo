ods = prepareODS(path)
ods = as.data.frame(ods)
sds = syn(ods)
sds.df = sds$syn
sds.df
sds$syn$`Number of Episodes Previous Day`
adjustEpisode <- function(syn)
{
numRow <- nrow(syn)
for (i in 1:numRow)
{
if (syn$`Number of Episodes Previous Day`[i] == 0)
{
syn$`Episode`[i-1] = 0
}
else
{
syn$`Episode`[i-1] = 1
}
}
return(syn)
}
sds$syn <- adjustEpisode(sds$syn)
sds$syn
# Episode and Numbe of Episode the previous day need to be as factor
# for ods
ods[,"Episode"] <- as.factor(ods[,"Episode"])
ods[,"Number of Episodes Previous Day"] <- as.factor(ods[,"Number of Episodes Previous Day"])
# for sds
sds$syn[,"Episode"] <- as.factor(sds$syn[,"Episode"])
sds$syn[,"Number of Episodes Previous Day"] <- as.factor(sds$syn[,"Number of Episodes Previous Day"])
sds$syn
print(class(ods))
print(class(sds))
print(class(sds.df))
call <- sds$call
m <- sds$m
method <- sds$method
predictor.matrix <- sds$predictor.matrix
# print(sds$call)
# print(sds$m)
# print(sds$method)
# print(sds$predictor.matrix)
# print(head(sds$syn))
compare(sds, ods, vars = "AM Stress")
compare(sds, ods, vars = "AM Sleep hours")
compare(sds, ods, vars = "Number of Episodes Previous Day")
compare(sds, ods, vars = "Episode")
# install and load package with ipak function bt Steven Worthington
# https://gist.github.com/stevenworthington/3178163
ipak <- function(pkg){
# This function is for attaching libraries in a vector into the session
# If they are not installed yet, then proceed and install them
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Create a list of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table")
ipak(libraryList)
#  function ods takes in a dataset with all variables
# return a dataset with only a set of selected variables
makeODS <- function(data)
{
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
ods <- data[,vars]
return(ods)
}
#ods = makeODS(data)
# convertToInt <- function(data)
# {
#   vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
#          "AM Weight", "PM Stress", "EVE Stress",
#          "Number of Episodes Previous Day", "Episode" )
#   data[vars] <- sapply(X = data[vars], FUN = as.integer)
#   sapply(X = data, FUN = class)
#   return(data)
# }
#ods = convertToInt(ods)
prepareODS <- function(path)
{
data = read_csv(path)
ods = makeODS(data)
#ods = convertToInt(ods)  # Will cause error to compare()
return(ods)
}
path = "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data/Individual_Patient/patientID_17.csv"
ods = prepareODS(path)
ods = as.data.frame(ods)
sds = syn(ods)
sds.df = sds$syn
sds.df
sds$syn$`Number of Episodes Previous Day`
adjustEpisode <- function(syn)
{
numRow <- nrow(syn)
for (i in 1:numRow)
{
if (syn$`Number of Episodes Previous Day`[i] == 0)
{
syn$`Episode`[i-1] = 0
}
else
{
syn$`Episode`[i-1] = 1
}
}
return(syn)
}
sds$syn <- adjustEpisode(sds$syn)
sds$syn
# Episode and Numbe of Episode the previous day need to be as factor
# for ods
ods[,"Episode"] <- as.factor(ods[,"Episode"])
ods[,"Number of Episodes Previous Day"] <- as.factor(ods[,"Number of Episodes Previous Day"])
# for sds
sds$syn[,"Episode"] <- as.factor(sds$syn[,"Episode"])
sds$syn[,"Number of Episodes Previous Day"] <- as.factor(sds$syn[,"Number of Episodes Previous Day"])
sds$syn
print(class(ods))
print(class(sds))
print(class(sds.df))
call <- sds$call
m <- sds$m
method <- sds$method
predictor.matrix <- sds$predictor.matrix
# print(sds$call)
# print(sds$m)
# print(sds$method)
# print(sds$predictor.matrix)
# print(head(sds$syn))
compare(sds, ods, vars = "AM Stress")
compare(sds, ods, vars = "AM Sleep hours")
compare(sds, ods, vars = "Number of Episodes Previous Day")
compare(sds, ods, vars = "Episode")
path = "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data/Individual_Patient/patientID_17.csv"
ods = prepareODS(path)
ods = as.data.frame(ods)
sds = syn(ods)
adjustEpisode <- function(syn)
{
numRow <- nrow(syn)
for (i in 1:numRow)
{
if (syn$`Number of Episodes Previous Day`[i] == 0)
{
syn$`Episode`[i-1] = 0
}
else
{
syn$`Episode`[i-1] = 1
}
}
return(syn)
}
sds$syn <- adjustEpisode(sds$syn)
sds$syn
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
compare(sds, ods, vars[i])
}
compare(sds, ods, vars = "AM Stress")
compare(sds, ods, vars = "AM Sleep hours")
compare(sds, ods, vars = "Number of Episodes Previous Day")
# install and load package with ipak function bt Steven Worthington
# https://gist.github.com/stevenworthington/3178163
ipak <- function(pkg){
# This function is for attaching libraries in a vector into the session
# If they are not installed yet, then proceed and install them
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Create a list of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table")
ipak(libraryList)
#  function ods takes in a dataset with all variables
# return a dataset with only a set of selected variables
makeODS <- function(data)
{
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
ods <- data[,vars]
return(ods)
}
#ods = makeODS(data)
# convertToInt <- function(data)
# {
#   vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
#          "AM Weight", "PM Stress", "EVE Stress",
#          "Number of Episodes Previous Day", "Episode" )
#   data[vars] <- sapply(X = data[vars], FUN = as.integer)
#   sapply(X = data, FUN = class)
#   return(data)
# }
#ods = convertToInt(ods)
prepareODS <- function(path)
{
data = read_csv(path)
ods = makeODS(data)
#ods = convertToInt(ods)  # Will cause error to compare()
return(ods)
}
path = "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data/Individual_Patient/patientID_17.csv"
ods = prepareODS(path)
ods = as.data.frame(ods)
sds = syn(ods)
adjustEpisode <- function(syn)
{
numRow <- nrow(syn)
for (i in 1:numRow)
{
if (syn$`Number of Episodes Previous Day`[i] == 0)
{
syn$`Episode`[i-1] = 0
}
else
{
syn$`Episode`[i-1] = 1
}
}
return(syn)
}
sds$syn <- adjustEpisode(sds$syn)
sds$syn
# Episode and Numbe of Episode the previous day need to be as factor
# for ods
ods[,"Episode"] <- as.factor(ods[,"Episode"])
ods[,"Number of Episodes Previous Day"] <- as.factor(ods[,"Number of Episodes Previous Day"])
# for sds
sds$syn[,"Episode"] <- as.factor(sds$syn[,"Episode"])
sds$syn[,"Number of Episodes Previous Day"] <- as.factor(sds$syn[,"Number of Episodes Previous Day"])
sds$syn
call <- sds$call
m <- sds$m
method <- sds$method
predictor.matrix <- sds$predictor.matrix
# print(sds$call)
# print(sds$m)
# print(sds$method)
# print(sds$predictor.matrix)
# print(head(sds$syn))
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
compare(sds, ods, vars = "AM Stress")
compare(sds, ods, vars = "AM Sleep hours")
compare(sds, ods, vars = "Number of Episodes Previous Day")
compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
compare(sds, ods, vars[i])
}
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
print(cmp)
}
# install and load package with ipak function bt Steven Worthington
# https://gist.github.com/stevenworthington/3178163
ipak <- function(pkg){
# This function is for attaching libraries in a vector into the session
# If they are not installed yet, then proceed and install them
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Create a list of library needed and attach them to the session with ipak()
libraryList <- c("devtools","tidyverse", "tibble", "synthpop","gridExtra", "data.table")
ipak(libraryList)
#  function ods takes in a dataset with all variables
# return a dataset with only a set of selected variables
makeODS <- function(data)
{
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
ods <- data[,vars]
return(ods)
}
#ods = makeODS(data)
# convertToInt <- function(data)
# {
#   vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
#          "AM Weight", "PM Stress", "EVE Stress",
#          "Number of Episodes Previous Day", "Episode" )
#   data[vars] <- sapply(X = data[vars], FUN = as.integer)
#   sapply(X = data, FUN = class)
#   return(data)
# }
#ods = convertToInt(ods)
prepareODS <- function(path)
{
data = read_csv(path)
ods = makeODS(data)
#ods = convertToInt(ods)  # Will cause error to compare()
return(ods)
}
path = "/Users/KVTran/Documents/Research/WPI/Slip_Buddy/REU_2017/data/Individual_Patient/patientID_17.csv"
ods = prepareODS(path)
ods = as.data.frame(ods)
sds = syn(ods)
adjustEpisode <- function(syn)
{
numRow <- nrow(syn)
for (i in 1:numRow)
{
if (syn$`Number of Episodes Previous Day`[i] == 0)
{
syn$`Episode`[i-1] = 0
}
else
{
syn$`Episode`[i-1] = 1
}
}
return(syn)
}
sds$syn <- adjustEpisode(sds$syn)
sds$syn
# Episode and Numbe of Episode the previous day need to be as factor
# for ods
ods[,"Episode"] <- as.factor(ods[,"Episode"])
ods[,"Number of Episodes Previous Day"] <- as.factor(ods[,"Number of Episodes Previous Day"])
# for sds
sds$syn[,"Episode"] <- as.factor(sds$syn[,"Episode"])
sds$syn[,"Number of Episodes Previous Day"] <- as.factor(sds$syn[,"Number of Episodes Previous Day"])
sds$syn
call <- sds$call
m <- sds$m
method <- sds$method
predictor.matrix <- sds$predictor.matrix
# print(sds$call)
# print(sds$m)
# print(sds$method)
# print(sds$predictor.matrix)
# print(head(sds$syn))
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
print(cmp)
}
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
return(cmp)
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
return(cmp)
}
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
print(cmp)
}
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
}
cmp[1]
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
print(cmp[1])
}
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
print(cmp[1])
print(cmp[2])
}
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
}
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
}
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
return(cmp)
}
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
}
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
}
cmp
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
vars <- c("AM Stress", "AM Hunger", "AM Sleep", "AM Sleep hours",
"AM Weight", "Percent Weight change (from prev week)", "Percent Weight change (from prev day)",
"PM Stress", "EVE Stress",
"Number of Episodes Previous Day", "Episode" )
for (i in 1:length(vars))
{
cmp = compare(sds, ods, vars[i])
print(cmp[1])
print(cmp[2])
}
# compare(sds, ods, vars = "AM Stress")
# compare(sds, ods, vars = "AM Sleep hours")
# compare(sds, ods, vars = "Number of Episodes Previous Day")
# compare(sds, ods, vars = "Episode")
compare(sds, ods, vars)
